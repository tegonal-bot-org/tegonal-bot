#
#    __                          __
#   / /____ ___ ____  ___  ___ _/ /       This script is provided to you by https://github.com/tegonal-bot-org/tegonal-bot
#  / __/ -_) _ `/ _ \/ _ \/ _ `/ /        Copyright 2024 Tegonal Genossenschaft <info@tegonal.com>
#  \__/\__/\_, /\___/_//_/\_,_/_/         It is licensed under Apache License, Version 2.0
#         /___/                           Please report bugs and contribute back your improvements
#
#                                         Version: v0.1.0-SNAPSHOT
###################################
name: "gt update in repos"
on:
  workflow_dispatch:

jobs:
  determine_repos:
    name: Determine Repositories
    runs-on: ubuntu-latest
    if: github.repository_owner == 'tegonal-bot-org'
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        run: ./scripts/get-repo-matrix.sh "${{ secrets.GITHUB_TOKEN }}" >> "$GITHUB_OUTPUT"

  determine_remotes:
    name: remotes ${{ matrix.repoName }}
    needs: determine_repos
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.determine_repos.outputs.matrix) }}
    outputs:
      repo_1: ${{ steps.set-matrix.outputs.repo_1 }}
      repo_2: ${{ steps.set-matrix.outputs.repo_2 }}
      repo_3: ${{ steps.set-matrix.outputs.repo_3 }}
      repo_4: ${{ steps.set-matrix.outputs.repo_4 }}
      repo_5: ${{ steps.set-matrix.outputs.repo_5 }}
      repo_6: ${{ steps.set-matrix.outputs.repo_6 }}
      repo_7: ${{ steps.set-matrix.outputs.repo_7 }}
      repo_8: ${{ steps.set-matrix.outputs.repo_8 }}
      repo_9: ${{ steps.set-matrix.outputs.repo_9 }}
      repo_10: ${{ steps.set-matrix.outputs.repo_10 }}
      repo_11: ${{ steps.set-matrix.outputs.repo_11 }}
      repo_12: ${{ steps.set-matrix.outputs.repo_12 }}
      repo_13: ${{ steps.set-matrix.outputs.repo_13 }}
      repo_14: ${{ steps.set-matrix.outputs.repo_14 }}
      repo_15: ${{ steps.set-matrix.outputs.repo_15 }}
      repo_16: ${{ steps.set-matrix.outputs.repo_16 }}
      repo_17: ${{ steps.set-matrix.outputs.repo_17 }}
      repo_18: ${{ steps.set-matrix.outputs.repo_18 }}
      repo_19: ${{ steps.set-matrix.outputs.repo_19 }}
    steps:
      - name: Import gpg key(s) defined in vars.PUBLIC_GPG_KEYS_WE_TRUST and secrets.PUBLIC_GPG_KEYS_WE_TRUST
        run: |
          gpg --import - <<< "${{ vars.PUBLIC_GPG_KEYS_WE_TRUST }}" && success=true \
            || (echo "could not import GPG keys via vars.PUBLIC_GPG_KEYS_WE_TRUST -- maybe it's not defined"; exit 1) && \
          false || gpg --import - <<< "${{ secrets.PUBLIC_GPG_KEYS_WE_TRUST }}" && success=true \
            || (echo "could not import GPG keys via secrets.PUBLIC_GPG_KEYS_WE_TRUST -- maybe it's not defined"; exit 1) && \
          false || "${success:-false}" && echo "was able to import GPGs either via vars or secrets (or via both -- see above)"
      - name: Install gt
        run: |
          set -e
          # see install.doc.sh in https://github.com/tegonal/gt, MODIFY THERE NOT HERE (please report bugs)
          currentDir=$(pwd) && \
          tmpDir=$(mktemp -d -t gt-download-install-XXXXXXXXXX) && cd "$tmpDir" && \
          wget "https://raw.githubusercontent.com/tegonal/gt/main/.gt/signing-key.public.asc" && \
          wget "https://raw.githubusercontent.com/tegonal/gt/main/.gt/signing-key.public.asc.sig" && \
          gpg --verify ./signing-key.public.asc.sig ./signing-key.public.asc && \
          echo "public key trusted" && \
          mkdir ./gpg && \
          gpg --homedir ./gpg --import ./signing-key.public.asc && \
          wget "https://raw.githubusercontent.com/tegonal/gt/v1.4.4/install.sh" && \
          wget "https://raw.githubusercontent.com/tegonal/gt/v1.4.4/install.sh.sig" && \
          gpg --homedir ./gpg --verify ./install.sh.sig ./install.sh && \
          chmod +x ./install.sh && \
          echo "verification successful" || (printf >&2 "\033[0;31mERROR\033[0m: verification failed, don't continue !!\n"; exit 1) && \
          ./install.sh && result=true || (echo >&2 "installation failed"; exit 1) && \
          false || cd "$currentDir" && rm -r "$tmpDir" && "${result:-false}"
          # end install.doc.sh
      - uses: actions/checkout@v4
        with:
          repository: '${{ matrix.upstream }}'
      - id: set-matrix
        name: set matrix
        run: |
            remotes="$(
              (
                gt remote list |
                    sed -E 's@(.*)@{ "remote": "\1", "repository": "${{ matrix.repository }}", "repoName": "${{matrix.repoName}}", "upstream": "${{ matrix.upstream }}" }@'
              ) | paste -sd ','
            )"
            echo "repo_${{ matrix.nr }}=[ $remotes ]"
            echo "repo_${{ matrix.nr }}=[ $remotes ]" >> "$GITHUB_OUTPUT"

  create_update_matrix:
    name: Create Update Matrix
    needs: determine_remotes
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        name: Create matrix
        run: |
          remotes=$(
            jq -c '.[] | fromjson' <<<'${{ toJSON(needs.determine_remotes.outputs) }}' | \
              jq -sc 'reduce .[] as $arr ([]; . + $arr)'
          )
          echo "matrix={\"include\": $remotes}"
          echo "matrix={\"include\": $remotes}" >> "$GITHUB_OUTPUT"

  update:
    needs: create_update_matrix
    name: 'Up ${{ matrix.remote }} of ${{ matrix.repoName }}'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.create_update_matrix.outputs.matrix) }}

    steps:
      - name: Import gpg key(s) defined in vars.PUBLIC_GPG_KEYS_WE_TRUST and secrets.PUBLIC_GPG_KEYS_WE_TRUST
        run: |
          gpg --import - <<< "${{ vars.PUBLIC_GPG_KEYS_WE_TRUST }}" && success=true \
            || (echo "could not import GPG keys via vars.PUBLIC_GPG_KEYS_WE_TRUST -- maybe it's not defined"; exit 1) && \
          false || gpg --import - <<< "${{ secrets.PUBLIC_GPG_KEYS_WE_TRUST }}" && success=true \
            || (echo "could not import GPG keys via secrets.PUBLIC_GPG_KEYS_WE_TRUST -- maybe it's not defined"; exit 1) && \
          false || "${success:-false}" && echo "was able to import GPGs either via vars or secrets (or via both -- see above)"
      - name: Install gt
        run: |
          set -e
          # see install.doc.sh in https://github.com/tegonal/gt, MODIFY THERE NOT HERE (please report bugs)
          currentDir=$(pwd) && \
          tmpDir=$(mktemp -d -t gt-download-install-XXXXXXXXXX) && cd "$tmpDir" && \
          wget "https://raw.githubusercontent.com/tegonal/gt/main/.gt/signing-key.public.asc" && \
          wget "https://raw.githubusercontent.com/tegonal/gt/main/.gt/signing-key.public.asc.sig" && \
          gpg --verify ./signing-key.public.asc.sig ./signing-key.public.asc && \
          echo "public key trusted" && \
          mkdir ./gpg && \
          gpg --homedir ./gpg --import ./signing-key.public.asc && \
          wget "https://raw.githubusercontent.com/tegonal/gt/v1.4.4/install.sh" && \
          wget "https://raw.githubusercontent.com/tegonal/gt/v1.4.4/install.sh.sig" && \
          gpg --homedir ./gpg --verify ./install.sh.sig ./install.sh && \
          chmod +x ./install.sh && \
          echo "verification successful" || (printf >&2 "\033[0;31mERROR\033[0m: verification failed, don't continue !!\n"; exit 1) && \
          ./install.sh && result=true || (echo >&2 "installation failed"; exit 1) && \
          false || cd "$currentDir" && rm -r "$tmpDir" && "${result:-false}"
          # end install.doc.sh
      - uses: actions/checkout@v4
        with:
          repository: '${{ matrix.upstream }}'
      - name: reset gpg keys
        run: gt reset --gpg-only true -r "${{ matrix.remote }}"
      - name: gt update
        id: gt_update
        run: |
          gt update -r "${{ matrix.remote }}" && gt update -r "${{ matrix.remote }}"
          echo "remote_version=$(git --git-dir='.gt/remotes/${{ matrix.remote }}/repo/.git' tag | sort --version-sort | tail -n 1)" >> $GITHUB_OUTPUT
      - id: has_changes
        name: git status
        run: |
            git status
            gitStatus=$(git status --porcelain)
            (if [[ $gitStatus != "" ]]; then echo "has_changes=1"; else echo "has_changes=0"; fi) >> $GITHUB_OUTPUT
      - name: git commit
        if: ${{ steps.has_changes.outputs.has_changes == 1 }}
        run: |
            git config --local user.name 'tegonal-bot'
            git config --local user.email 'tegonal-bot@users.noreply.github.com'
            git commit -am 'update files of remote ${{ matrix.remote }} to version ${{steps.gt_update.outputs.remote_version}} via gt' || true
      - name: cleanup-on-push-to-main
        if: ${{ steps.has_changes.outputs.has_changes == 1 }}
        run: |
            (./scripts/cleanup-on-push-to-main.sh &&
                git commit -am 'cleanup after gt pull for remote ${{ matrix.remote }} and version ${{steps.gt_update.outputs.remote_version}}'
            ) || (printf >&2 "\033[0;31mERROR\033[0m: during cleanup, going to reset changes back to the status after \`gt update\`'" && git reset --hard)
      - name: Create pull request if necessary
        if: ${{ steps.has_changes.outputs.has_changes == 1 }}
        uses: peter-evans/create-pull-request@v6
        with:
          branch: 'gt/update/${{ matrix.remote }}'
          base: main
          title: 'update files of remote ${{ matrix.remote }} to version ${{steps.gt_update.outputs.remote_version}} via gt'
          commit-message: 'update files of remote ${{ matrix.remote }} to version ${{steps.gt_update.outputs.remote_version}} via gt'
          body: "following the changes after running `gt update -r \"${{ matrix.remote }}\"` and reset gpg keys"
          delete-branch: true
          token: ${{ secrets.AUTO_PR_TOKEN }}
          push-to-fork: ${{ matrix.repository }}

